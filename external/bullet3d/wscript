#! /usr/bin/env python

srcdir = '.'
blddir = 'build'

APPNAME='bullet'
VERSION='2.77'

import os, sys, re
import waf_dynamo

sys.path.append("..")

def init(ctx):
    pass

def options(opt):
    opt.load('waf_dynamo')

def configure(conf):
    conf.load('waf_dynamo')
    conf.env.append_unique('DEFINES', 'NDEBUG')

def build(bld):

    name = f'{APPNAME}-{VERSION}'
    packagedir = f'package/{name}/src'

    path = f'{packagedir}/BulletCollision'
    bullet_collision = bld.stlib(
        features='cxx',
        defines=['NDEBUG'],
        includes=f'. .. ./package/{name}/src',
        target='BulletCollision',
        source=bld.path.ant_glob(
            [
                f'{path}/BroadphaseCollision/*.cpp',
                f'{path}/CollisionShapes/*.cpp',
                f'{path}/CollisionDispatch/*.cpp',
                f'{path}/Gimpact/*.cpp',
                f'{path}/NarrowPhaseCollision/*.cpp',
            ]
        ),
    )
    bullet_collision.install_path = None
    path = f'{packagedir}/BulletDynamics'
    bullet_dynamics = bld.stlib(
        features='cxx',
        defines=['NDEBUG'],
        includes=f'. .. ./package/{name}/src',
        target='BulletDynamics',
        source=bld.path.ant_glob(
            [
                f'{path}/Character/*.cpp',
                f'{path}/ConstraintSolver/*.cpp',
                f'{path}/Dynamics/*.cpp',
                f'{path}/Vehicle/*.cpp',
            ]
        ),
    )
    bullet_dynamics.install_path = None

    linear_math = bld.stlib(
        features='cxx',
        defines=['NDEBUG'],
        includes=f'. .. ./package/{name}/src',
        target='LinearMath',
        source=bld.path.ant_glob(f'{packagedir}/LinearMath/*.cpp'),
    )
    linear_math.install_path = None

    # for android
    linear_math.env.append_unique('CXXFLAGS', "-Wno-c++11-narrowing")
    bld.install_files('${PREFIX}/%s-%s/lib/%s/' % (APPNAME, VERSION, bld.env.PLATFORM), bld.env.cstlib_PATTERN % 'BulletCollision')
    bld.install_files('${PREFIX}/%s-%s/lib/%s/' % (APPNAME, VERSION, bld.env.PLATFORM), bld.env.cstlib_PATTERN % 'BulletDynamics')
    bld.install_files('${PREFIX}/%s-%s/lib/%s/' % (APPNAME, VERSION, bld.env.PLATFORM), bld.env.cstlib_PATTERN % 'LinearMath')
    bld.install_files('${PREFIX}/%s-%s/include' % (APPNAME, VERSION), bld.path.ant_glob(['**/*.h']), cwd=bld.path.find_dir(packagedir), relative_trick=True)

def package(conf):
    # TODO: Check how much of this can be moved to waf_package.py

    env = waf_package.load_build_context(blddir)
    cwd = os.path.join(env.PREFIX, f"{APPNAME}-{VERSION}").replace('\\', '/')

    files = waf_package.glob_files("include/**/*", cwd=cwd)
    files.extend(waf_package.glob_files("include/*", cwd=cwd))
    target = os.path.join(env.PREFIX, f"{APPNAME}-{VERSION}-common.tar.gz")
    waf_package.create_tar(files, cwd, target=target)
    print("Wrote", target)

    files = waf_package.glob_files(
        [
            f"bin/{env.PLATFORM}/*",
            f"bin/{env.PLATFORM}/**/*",
            f"lib/{env.PLATFORM}/*",
            f"lib/{env.PLATFORM}/**/*",
        ],
        cwd=cwd,
    )

    target = os.path.join(env.PREFIX, f"{APPNAME}-{VERSION}-{env.PLATFORM}.tar.gz")
    waf_package.create_tar(files, cwd, target=target)

    print("Wrote", target)
