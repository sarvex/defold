#! /usr/bin/env python

import os, sys
from waf_dynamo import dmsdk_add_files, platform_supports_feature
from BuildUtility import create_build_utility
import waflib.Options

def options(opt):
    pass

def _get_native_source(target_os, feature):
    native_source = f'{target_os}/graphics_native.cpp'
    if not os.path.exists(os.path.join('src',native_source)):
        native_source = f'{feature}/graphics_native.cpp'
    return native_source

def build(bld):

    build_util = create_build_utility(bld.env)

    if platform_supports_feature(bld.env.PLATFORM, 'opengl', {}):
        obj = bld.stlib(features        = 'ddf cxx',
                        includes        = ['. opengl', '../proto'],
                        source          = bld.path.ant_glob(['*.cpp', 'opengl/*.cpp']) + bld.path.parent.ant_glob('proto/graphics/*'),
                        proto_gen_py    = True,
                        protoc_includes = '../proto',
                        use             = 'DDF DLIB',
                        target          = 'graphics')

        if 'web' in bld.env.PLATFORM:
             obj.source.append('opengl/async/job_queue_sync.cpp');
        else:
             obj.source.append('opengl/async/job_queue_threaded.cpp');

    bld.add_group()

    if platform_supports_feature(bld.env.PLATFORM, 'vulkan', {}):
        obj = bld.stlib(features        = 'ddf cxx',
                        includes        = ['. vulkan', '../proto'],
                        proto_gen_py    = True,
                        protoc_includes = '../proto',
                        use             = 'DDF DLIB',
                        source          = bld.path.ant_glob(['*.cpp', 'vulkan/*.cpp']) + bld.path.parent.ant_glob('proto/graphics/*'),
                        target          = 'graphics_vulkan')

        if bld.env.PLATFORM in ('arm64-nx64', 'x86_64-ps4'):
            obj.source = [x for x in obj.source if not x.name.endswith('graphics_glfw_wrappers.cpp')]

        obj.source = [x for x in obj.source if not x.abspath().endswith(os.path.join('vulkan','graphics_native.cpp'))]
        obj.source.append(_get_native_source(build_util.get_target_os(), 'vulkan'))

        if bld.env.PLATFORM in ('x86_64-macos','arm64-macos'):
            obj.source.append('vulkan/macosx/graphics_vulkan_macosx_surface.mm')
        elif bld.env.PLATFORM in ('arm64-ios',):
            obj.source.append('vulkan/ios/graphics_vulkan_ios_surface.mm')
        elif bld.env.PLATFORM in ['armv7-android', 'arm64-android']:
            obj.source.append('vulkan/android/graphics_vulkan_android_surface.cpp')
            obj.source.append('vulkan/android/graphics_vulkan_android.cpp')
        elif bld.env.PLATFORM == 'x86_64-linux':
            obj.source.append('vulkan/linux/graphics_vulkan_linux_surface.cpp')
        elif bld.env.PLATFORM in ['x86_64-win32', 'win32']:
            obj.source.append('vulkan/win32/graphics_vulkan_win32_surface.cpp')

    if bld.env.PLATFORM == 'x86_64-ps4':
        obj = bld.stlib(features = 'ddf cxx',
                       includes = ['.', '../proto'],
                       source   = bld.path.ant_glob(['*.cpp', 'null/*.cpp']) + bld.path.parent.ant_glob('proto/graphics/*'),
                       proto_gen_py = True,
                       protoc_includes = '../proto',
                       use    = 'DDF DLIB',
                       target = 'graphics_ps4')
        obj.source = [x for x in obj.source if not x.name.endswith('graphics_glfw_wrappers.cpp')]

    obj = bld.stlib(features        = 'ddf cxx',
                    includes        = ['.', 'null', '../proto'],
                    source          = bld.path.ant_glob(['*.cpp', 'null/*.cpp']) + bld.path.parent.ant_glob('proto/graphics/*'),
                    proto_gen_py    = True,
                    protoc_includes = '../proto',
                    use             = 'DDF DLIB',
                    target          = 'graphics_null')

    obj.source = [x for x in obj.source if not x.name.endswith('graphics_glfw_wrappers.cpp')]

    obj = bld.stlib(features     = 'cxx',
                    includes     = ['.', '../proto'],
                    use          = 'DLIB',
                    source       = 'transcoder/graphics_transcoder_null.cpp',
                    target       = 'graphics_transcoder_null')

    obj = bld.stlib(features     = 'cxx',
                    includes     = ['.', '../proto'],
                    use          = 'DLIB',
                    source       = 'transcoder/graphics_transcoder_basisu.cpp',
                    target       = 'graphics_transcoder_basisu')

    bld.install_files('${PREFIX}/include/graphics/', 'graphics.h')
    bld.install_files('${PREFIX}/include/graphics/', 'graphics_util.h')
    bld.install_files('${PREFIX}/include/graphics/', 'graphics_native.h')
    bld.install_files('${PREFIX}/include/graphics/opengl/win32', 'opengl/win32/glext.h')
    bld.install_files('${PREFIX}/include/graphics/opengl', 'opengl/graphics_opengl_defines.h')

    bld.install_files('${PREFIX}/share/proto/graphics', '../proto/graphics/graphics_ddf.proto')

    dmsdk_add_files(bld, '${PREFIX}/sdk/include/dmsdk', 'dmsdk')

    bld.install_files('${PREFIX}/bin', 'texc.py')
    bld.install_files('${PREFIX}/lib/python', 'waf_graphics.py')

    if not waflib.Options.options.skip_build_tests:
        bld.recurse('test')

def configure(conf):
    pass
