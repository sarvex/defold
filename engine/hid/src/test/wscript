#!/usr/bin/env python
import os
from waf_dynamo import platform_supports_feature
from BuildUtility import create_build_utility
from waflib import Options

def _get_native_file(target_os, name):
    native_source = f'{target_os}/{name}'
    if not os.path.exists(os.path.join('..','src',native_source)):
        native_source = name
    return native_source

def build(bld):
    build_util = create_build_utility(bld.env)

    platform_folder = _get_native_file(build_util.get_target_os(), '../glfw')

    obj = bld.program(
        features='cxx test',
        includes=[
            f'../{build_util.get_target_os()}',
            '..',
            '.',
            platform_folder,
        ],
        use='TESTMAIN DLIB PROFILE_NULL DMGLFW PLATFORM PLATFORM_SOCKET LUA SCRIPT hid_null',
        target='test_hid',
        source='test_hid.cpp',
    )

    graphics_lib = ['GRAPHICS', 'DMGLFW']
    graphics_lib_symbols = 'GraphicsAdapterOpenGL'
    if platform_supports_feature(bld.env.PLATFORM, 'opengl', {}):
        graphics_lib += ['OPENGL']

    elif platform_supports_feature(bld.env.PLATFORM, 'vulkan', {}) or Options.options.with_vulkan:
        graphics_lib_symbols = 'GraphicsAdapterVulkan'
        graphics_lib = ['GRAPHICS_VULKAN', 'VULKAN']

    else:
        graphics_lib = ['GRAPHICS_NULL']
        graphics_lib_symbols = 'GraphicsAdapterNull'

    if bld.env.PLATFORM in ('arm64-nx64') and 'DMGLFW' in graphics_lib:
        graphics_lib.remove('DMGLFW')

    exported_symbols = [graphics_lib_symbols]

    web_libs = ['library_glfw.js', 'library_sys.js']

    bld.program(
        features='cxx test skip_test',
        includes=[
            f'../{build_util.get_target_os()}',
            '..',
            '.',
            platform_folder,
        ],
        use='TESTMAIN TESTAPP DLIB DINPUT PROFILE_NULL PLATFORM PLATFORM_SOCKET PLATFORM_HID LUA SCRIPT hid'.split()
        + graphics_lib,
        web_libs=web_libs,
        exported_symbols=exported_symbols,
        target='test_app_hid',
        source='test_app_hid.cpp',
    )
