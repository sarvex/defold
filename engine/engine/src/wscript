#! /usr/bin/env python
import os, re
from waf_dynamo import dmsdk_add_files, copy_file_task, apidoc_extract_task, platform_supports_feature
import waflib.Options

def options(opt):
    pass

def build(bld):

    platform_bin_install_path = os.path.join(bld.env["PREFIX"], 'bin', bld.env['PLATFORM'])
    platform_lib_install_path = os.path.join(bld.env["PREFIX"], 'lib', bld.env['PLATFORM'])

    bld.stlib(features = 'cxx embed',
              includes = '. ..',
              source = 'engine_service.cpp',
              target = 'engine_service',
              install_path = platform_lib_install_path,
              embed_source = '../content/profiler.html')

    bld.stlib(features = 'cxx',
              includes = '. ..',
              source = 'engine_service_null.cpp',
              install_path = platform_lib_install_path,
              target = 'engine_service_null')

    platform_main_cpp = 'nx64/main.cpp' if 'arm64-nx64' in bld.env.PLATFORM else ''
    bld.stlib(
        features='cxx ddf embed',
        includes='../proto . ..',
        target='engine',
        proto_gen_py=True,
        protoc_includes=['../proto', bld.env['PREFIX'] + '/share'],
        embed_source='../content/materials/debug.vpc ../content/materials/debug.fpc ../content/builtins/connect/game.project ../content/builtins.arci ../content/builtins.arcd ../content/builtins.dmanifest',
        source=f'engine.cpp engine_main.cpp engine_loop.cpp extension.cpp physics_debug_render.cpp ../proto/engine/engine_ddf.proto {platform_main_cpp}',
        install_path=platform_lib_install_path,
        use='engine_service',
    )

    bld.add_group()

    bld.stlib(
        features='cxx ddf embed',
        includes='../proto . ..',
        target='engine_release',
        defines='DM_RELEASE=1',
        proto_gen_py=True,
        protoc_includes=['../proto', bld.env['PREFIX'] + '/share'],
        embed_source='../content/materials/debug.vpc ../content/materials/debug.fpc ../content/builtins_release.arci ../content/builtins_release.arcd ../content/builtins_release.dmanifest',
        source=f'engine.cpp engine_main.cpp engine_loop.cpp extension.cpp ../proto/engine/engine_ddf.proto {platform_main_cpp}',
        install_path=platform_lib_install_path,
        use='engine_service_null',
    )

    bld.install_files('${PREFIX}/include/engine', 'engine.h')
    bld.install_files('${PREFIX}/share/proto/engine', '../proto/engine/engine_ddf.proto')

    additional_libs = ['CRASH']

    resource_type_symbols = ['ResourceTypeGameObject', 'ResourceTypeCollection', 'ResourceTypeScript', 'ResourceTypeLua',
                             'ResourceTypeAnim', 'ResourceTypeAnimationSet', 'ResourceTypeGui', 'ResourceTypeGuiScript']
    component_type_symbols = ['ComponentTypeAnim', 'ComponentTypeScript', 'ComponentTypeGui', 'ComponentTypeMesh']

    exported_symbols = ['DefaultSoundDevice', 'AudioDecoderWav', 'CrashExt', 'ProfilerExt', 'LiveUpdateExt']

    # Add stb_vorbis and/or tremolo depending on platform
    if bld.env['PLATFORM'] in ('arm64-nx64', 'win32', 'x86_64-win32', 'js-web', 'wasm-web'):
        exported_symbols.append('AudioDecoderStbVorbis')
    elif bld.env['PLATFORM'] not in ('x86_64-ps4',):
        exported_symbols.append('AudioDecoderTremolo')
        additional_libs.append('TREMOLO')

    graphics_lib = 'GRAPHICS DMGLFW'
    graphics_lib_symbols = ['GraphicsAdapterOpenGL']

    if waflib.Options.options.with_vulkan:
        graphics_lib += ' GRAPHICS_VULKAN VULKAN'
        graphics_lib_symbols.append('GraphicsAdapterVulkan')

    if bld.env['PLATFORM'] in ('arm64-nx64',):
        graphics_lib = 'GRAPHICS_VULKAN DMGLFW VULKAN'
        graphics_lib_symbols = ['GraphicsAdapterVulkan']

    if bld.env['PLATFORM'] in ('x86_64-ps4',):
        graphics_lib = 'GRAPHICS_NULL'
        graphics_lib_symbols = ['GraphicsAdapterNull']

    exported_symbols += graphics_lib_symbols

    mobile_service_symbols = ['IACExt', 'IAPExt', 'PushExt', 'WebViewExt']
    if bld.env['PLATFORM'] in ('arm64-ios', 'x86_64-ios'):
        exported_symbols.extend(mobile_service_symbols)
        exported_symbols.append('FacebookExt')

    if 'android' in bld.env['PLATFORM']:
        sound_lib = 'SOUND OPENAL_SOFT OPENSLES'
        exported_symbols.extend(mobile_service_symbols)
        exported_symbols.append('FacebookExt')
        additional_libs.extend(('UNWIND', 'CPP_RUNTIME'))
    elif 'web' in bld.env['PLATFORM']:
        sound_lib = 'SOUND OPENAL'
        exported_symbols.extend(('FacebookExt', 'IAPExt'))
    sound_lib = 'SOUND' if 'arm64-nx64' in bld.env.PLATFORM else 'SOUND OPENAL'
    sound_lib = sound_lib.split()
    graphics_lib = graphics_lib.split()

    dynamo_home = os.getenv('DYNAMO_HOME')

    android_jar_paths = [
        f'{dynamo_home}/ext/share/java/android-support-multidex.jar',
        f'{dynamo_home}/ext/share/java/androidx-multidex.jar',
        f'{dynamo_home}/share/java/glfw_android.jar',
        f'{dynamo_home}/share/java/gamesys_android.jar',
        f'{dynamo_home}/share/java/sound_android.jar',
    ]

    web_libs = ['library_glfw.js', 'library_sys.js', 'library_script.js', 'library_sound.js']

    main_cpp = 'common/main.cpp'

    bld.add_group()

    profile_lib = ['PROFILE', 'PROFILEREXT']
    if bld.env['PLATFORM'] in ('js-web', 'wasm-web', 'arm64-nx64', 'x86_64-ps4'):
        profile_lib = ['PROFILE_NULL', 'PROFILEREXT_NULL']

    obj = bld(
        features = 'c cxx cprogram apk web extract_symbols',
        use = 'engine_rs WEBVIEWEXT PROFILEREXT FACEBOOKEXT IAPEXT PUSHEXT IACEXT GAMEOBJECT DDF LIVEUPDATE RESOURCE GAMESYS PHYSICS RECORD RENDER PLATFORM_SOCKET SCRIPT LUA EXTENSION HID PLATFORM_HID INPUT PARTICLE RIG DLIB GUI CRASH X engine engine_service'.split() + graphics_lib + sound_lib + profile_lib + additional_libs,
        web_libs = web_libs,
        exported_symbols = exported_symbols + resource_type_symbols + component_type_symbols,
        includes = '../build ../proto . ..',
        #NOTE: _XBOX to get static lib and avoid dllimport/dllexport stuff
        defines = '_XBOX',
        proto_gen_py = True,
        protoc_includes = '../proto',
        target = 'dmengine',
        bundleid = 'com.defold.engine',
        source = main_cpp.split(),
        proguard = ['../content/builtins/manifests/android/dmengine.pro'],
        install_path = platform_bin_install_path,
        jars = android_jar_paths)

    if 'win32' in bld.env.PLATFORM:
        obj.source.append('engine.rc') # Needs to bundle with icons, or IconExe.java won't be able to replace them (it cannot add them)
        obj.env.append_value('LINKFLAGS', ['Psapi.lib'])
        bld.install_files('${PREFIX}/lib/%s' % bld.env['PLATFORM'], 'defold.ico')
        bld.install_files('${PREFIX}/lib/%s' % bld.env['PLATFORM'], 'engine.rc')

    if 'android' in bld.env['PLATFORM']:
        bld.install_files('${PREFIX}/share/java', 'dmengine.android/classes.dex')

    bld.add_group()

    obj = bld(
        features = 'c cxx cprogram apk web extract_symbols',
        use = 'WEBVIEWEXT PROFILE_NULL PROFILEREXT_NULL FACEBOOKEXT IAPEXT PUSHEXT IACEXT GAMEOBJECT DDF LIVEUPDATE RESOURCE GAMESYS PHYSICS RECORD RENDER PLATFORM_SOCKET SCRIPT LUA EXTENSION HID PLATFORM_HID INPUT PARTICLE RIG DLIB GUI CRASH X engine_release engine_service_null'.split() + graphics_lib + sound_lib + additional_libs,
        web_libs = web_libs,
        exported_symbols = exported_symbols + resource_type_symbols + component_type_symbols,
        includes = '../build ../proto . ..',
        #NOTE: _XBOX to get static lib and avoid dllimport/dllexport stuff
        defines = '_XBOX DM_RELEASE=1',
        proto_gen_py = True,
        protoc_includes = '../proto',
        target = 'dmengine_release',
        source = main_cpp.split(),
        install_path = platform_bin_install_path,
        jars   = android_jar_paths)

    if 'win32' in bld.env.PLATFORM:
        obj.source.append('engine.rc')
        obj.env.append_value('LINKFLAGS', ['/SUBSYSTEM:WINDOWS', '/ENTRY:mainCRTStartup', 'Psapi.lib'])

    additional_libs = []
    if bld.env['PLATFORM'] in ('armv7-android', 'arm64-android', 'x86_64-macos'):
        additional_libs += ['UNWIND']

    graphics_lib = 'GRAPHICS_NULL'
    if bld.env['PLATFORM'] in ('arm64-android','armv7-android', 'arm64-ios', 'x86_64-ios'):
        graphics_lib = 'GRAPHICS_NULL DMGLFW' # g_AndroidApp is currently in glfw. UIApplicationMain is currently in glfw

    bld.add_group()

    obj = bld(
        features = 'c cxx cprogram apk web extract_symbols',
        use = 'RECORD_NULL GAMEOBJECT DDF LIVEUPDATE GAMESYS RESOURCE PHYSICS RENDER PLATFORM_SOCKET SCRIPT LUA EXTENSION HID_NULL INPUT PARTICLE RIG GUI CRASH DLIB SOUND_NULL engine engine_service'.split() + graphics_lib.split() + profile_lib + additional_libs,
        exported_symbols = ['ProfilerExt', 'LiveUpdateExt', 'GraphicsAdapterNull'] + resource_type_symbols + component_type_symbols,
        web_libs = web_libs,
        includes = '../build ../proto . ..',
        proto_gen_py = True,
        protoc_includes = '../proto',
        target = 'dmengine_headless',
        install_path = platform_bin_install_path,
        source = main_cpp.split())

    if 'win32' in bld.env.PLATFORM:
        obj.source.append('engine.rc')
        obj.env.append_value('LINKFLAGS', ['Psapi.lib'])

        src_dir = f"{bld.env.PREFIX}/ext/lib/{bld.env.PLATFORM}"
        install_path = os.path.join(bld.env["PREFIX"], 'bin', bld.env['PLATFORM'])
        task = copy_file_task(bld, f"{src_dir}/OpenAL32.dll")
        task.install_path = install_path
        task = copy_file_task(bld, f"{src_dir}/wrap_oal.dll")
        task.install_path = install_path

    if 'arm64-nx64' in bld.env['PLATFORM']:
        bld.install_files('${PREFIX}/bin/${PLATFORM}', 'dmengine.nso')
        bld.install_files('${PREFIX}/bin/${PLATFORM}', 'dmengine_release.nso')
        bld.install_files('${PREFIX}/bin/${PLATFORM}', 'dmengine_headless.nso')

    if not waflib.Options.options.skip_build_tests:
        bld.recurse('test')

    dmsdk_add_files(bld, '${PREFIX}/sdk/include/dmsdk', 'dmsdk')

    apidoc_extract_task(bld, ['../proto/engine/engine_ddf.proto', 'engine_doc.h'])

def configure(conf):
    pass
